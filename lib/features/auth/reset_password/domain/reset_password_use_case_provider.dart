import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/general_utils/typedef.dart';
import '../../../../core/shared_modules/errors_handling/utils/for_riverpod/failure_utils.dart';
import '../data/reset_password_repo_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'reset_password_repo_contract.dart';

part 'reset_password_use_case_provider.g.dart';

/// ðŸ§© [resetPasswordUseCaseProvider] â€” provides instance of [ResetPasswordUseCase]
/// ðŸ§¼ Uses [resetPasswordRepoProvider] as dependency

@riverpod
ResetPasswordUseCase resetPasswordUseCase(Ref ref) {
  //â”€â”€â”€â”€â”€------------------------------------------

  final repo = ref.watch(resetPasswordRepoProvider);
  return ResetPasswordUseCase(repo);
}

///

///

/// ðŸ“¦ [ResetPasswordUseCase] â€” encapsulates password reset logic
/// ðŸ§¼ Sends password reset email via [IResetPasswordRepo]

final class ResetPasswordUseCase {
  //â”€â”€â”€â”€â”€------------------------

  final IResetPasswordRepo repo;
  const ResetPasswordUseCase(this.repo);

  /// ðŸ“© Sends reset link to the provided email
  ResultFuture<void> call(String email) async {
    try {
      await repo.sendResetLink(email);
      return right(null);
    } catch (e, st) {
      return left(mapToFailure(e, st));
    }
  }

  //
}
